# Define the CSP class
print("192372134-A.Dileep Kumar")
class MapColoringCSP:
    def __init__(self, variables, domains, neighbors):
        self.variables = variables      # List of variables (e.g., regions)
        self.domains = domains          # Possible values for each variable
        self.neighbors = neighbors      # Adjacency constraints
        self.assignment = {}            # Current assignment

    # Check if current assignment is consistent with constraints
    def is_consistent(self, var, value):
        for neighbor in self.neighbors[var]:
            if neighbor in self.assignment and self.assignment[neighbor] == value:
                return False
        return True

    # Backtracking search algorithm
    def backtrack(self):
        # If assignment is complete, return it
        if len(self.assignment) == len(self.variables):
            return self.assignment

        # Select unassigned variable
        unassigned = [v for v in self.variables if v not in self.assignment]
        var = unassigned[0]

        for value in self.domains[var]:
            if self.is_consistent(var, value):
                self.assignment[var] = value

                result = self.backtrack()
                if result:
                    return result

                # Backtrack
                del self.assignment[var]

        return None

# Define the map (Australia example)
variables = ['WA', 'NT', 'SA', 'Q', 'NSW', 'V', 'T']
domains = {var: ['Red', 'Green', 'Blue'] for var in variables}
neighbors = {
    'WA': ['NT', 'SA'],
    'NT': ['WA', 'SA', 'Q'],
    'SA': ['WA', 'NT', 'Q', 'NSW', 'V'],
    'Q': ['NT', 'SA', 'NSW'],
    'NSW': ['SA', 'Q', 'V'],
    'V': ['SA', 'NSW'],
    'T': []
}

# Solve the CSP
csp = MapColoringCSP(variables, domains, neighbors)
solution = csp.backtrack()

# Print the solution
if solution:
    print("Map Coloring Solution:")
    for region, color in solution.items():
        print(f"{region}: {color}")
else:
    print("No solution found.")
