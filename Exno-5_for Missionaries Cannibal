from collections import deque

def is_valid(state):
    M_left, C_left, boat = state
    M_right = 3 - M_left
    C_right = 3 - C_left

    # Missionaries should not be outnumbered on either bank
    if (M_left < 0 or M_left > 3 or
        C_left < 0 or C_left > 3):
        return False

    if (M_left > 0 and M_left < C_left):
        return False
    if (M_right > 0 and M_right < C_right):
        return False

    return True

def get_successors(state):
    successors = []
    M, C, boat = state
    moves = [(1,0), (2,0), (0,1), (0,2), (1,1)]  # valid boat moves

    for m, c in moves:
        if boat == 1:  # Boat on the left
            new_state = (M - m, C - c, 0)
        else:  # Boat on the right
            new_state = (M + m, C + c, 1)

        if is_valid(new_state):
            successors.append(new_state)
    return successors

def bfs():
    initial = (3, 3, 1)  # (M_left, C_left, Boat_left)
    goal = (0, 0, 0)
    visited = set()
    queue = deque()
    queue.append((initial, [initial]))

    while queue:
        current, path = queue.popleft()

        if current == goal:
            print("\nSolution found!")
            for step in path:
                print(f"Left Bank: M={step[0]} C={step[1]} | Boat: {'Left' if step[2] == 1 else 'Right'}")
            return

        visited.add(current)

        for successor in get_successors(current):
            if successor not in visited:
                queue.append((successor, path + [successor]))

    print("No solution found.")

# Run the BFS
print("Missionaries and Cannibals Problem Solver")
bfs()
