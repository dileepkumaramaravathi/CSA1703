import heapq

print("192372134 - A.Dileep Kumar")

GOAL = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
MOVES = [(-1,0), (1,0), (0,-1), (0,1)]
MOVE_NAMES = ['Up', 'Down', 'Left', 'Right']

def manhattan(state):
    return sum(abs((val-1)//3 - i) + abs((val-1)%3 - j)
               for i, row in enumerate(state)
               for j, val in enumerate(row) if val != 0)

def find_blank(s):
    return next((i, j) for i in range(3) for j in range(3) if s[i][j] == 0)

def neighbors(state):
    x, y = find_blank(state)
    for (dx, dy), name in zip(MOVES, MOVE_NAMES):
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new = [r[:] for r in state]
            new[x][y], new[nx][ny] = new[nx][ny], new[x][y]
            yield new, name

def is_solvable(p):
    flat = [n for row in p for n in row if n != 0]
    inv = sum(a > b for i, a in enumerate(flat) for b in flat[i+1:])
    return inv % 2 == 0

def a_star(start):
    hq = [(manhattan(start), 0, start, [])]
    seen = set()
    while hq:
        f, g, state, path = heapq.heappop(hq)
        key = tuple(map(tuple, state))
        if key in seen: continue
        seen.add(key)
        if state == GOAL: return path + [(state, "Goal")]
        for n, move in neighbors(state):
            heapq.heappush(hq, (g + 1 + manhattan(n), g + 1, n, path + [(state, move)]))
    return None

def print_state(s): print('\n'.join(' '.join(str(c) if c else ' ' for c in r) for r in s), '\n')

def get_input():
    print("Enter 8-puzzle (use 0 for blank):")
    return [list(map(int, input(f"Row {i+1}: ").split())) for i in range(3)]

if __name__ == "__main__":
    start = get_input()
    flat = [n for r in start for n in r]
    if sorted(flat) != list(range(9)):
        print("Invalid input: use digits 0â€“8 without duplicates.")
    elif not is_solvable(start):
        print("This puzzle is not solvable.")
    else:
        print("\nSolving the puzzle...\n")
        res = a_star(start)
        if res:
            for i, (s, m) in enumerate(res):
                print(f"Step {i}: {m}"); print_state(s)
            print(f"Solved in {len(res)-1} moves.")
        else:
            print("No solution found.")
