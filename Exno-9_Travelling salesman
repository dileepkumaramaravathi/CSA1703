from itertools import permutations

def tsp_brute_force(graph, start):
    cities = list(graph.keys())
    cities.remove(start)
    
    min_cost = float('inf')
    best_path = []

    for perm in permutations(cities):
        current_cost = 0
        current_path = [start] + list(perm) + [start]  # complete cycle

        for i in range(len(current_path) - 1):
            u = current_path[i]
            v = current_path[i + 1]
            current_cost += graph[u][v]

        if current_cost < min_cost:
            min_cost = current_cost
            best_path = current_path

    return best_path, min_cost

# Example graph as adjacency matrix represented with a dictionary of dictionaries
graph = {
    'A': {'A': 0, 'B': 10, 'C': 15, 'D': 20},
    'B': {'A': 10, 'B': 0, 'C': 35, 'D': 25},
    'C': {'A': 15, 'B': 35, 'C': 0, 'D': 30},
    'D': {'A': 20, 'B': 25, 'C': 30, 'D': 0}
}

start_city = 'A'
path, cost = tsp_brute_force(graph, start_city)

print("Optimal Path:", " -> ".join(path))
print("Minimum Cost:", cost)
